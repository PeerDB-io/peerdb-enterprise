{{- define "peerdb.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{- define "catalog.secretName" -}}
{{- if .Values.catalog.existingSecret -}}
{{- .Values.catalog.existingSecret }}
{{- else -}}
{{- .Values.catalog.credentialsSecretName }}
{{- end -}}
{{- end -}}

{{- define "catalog.deployed.secretName" -}}
{{ printf "%s-%s-%s" (.Values.catalog.deploy.clusterName) "pguser" (.Values.catalog.pgUser) }}
{{- end -}}

{{- define "catalog.secretNameToUse" -}}
{{- if .Values.catalog.deploy.enabled -}}
{{/* The secret with given keys is auto-generated by the operator if we seek to use it, else we create ourselves*/}}
{{- include "catalog.deployed.secretName" . -}}
{{- else -}}
{{- include "catalog.secretName" . -}}
{{- end -}}
{{- end -}}

{{- define "catalog.pgConf" -}}
{{- $secretNameToUse := include "catalog.secretNameToUse" . }}
- name: PEERDB_CATALOG_HOST
  valueFrom:
    secretKeyRef:
      name: {{ $secretNameToUse }}
      key: host
- name: PEERDB_CATALOG_PORT
  valueFrom:
    secretKeyRef:
      name: {{ $secretNameToUse }}
      key: port
- name: PEERDB_CATALOG_USER
  valueFrom:
    secretKeyRef:
      name: {{ $secretNameToUse }}
      key: user
- name: PEERDB_CATALOG_PASSWORD
  valueFrom:
    secretKeyRef:
      name:  {{ $secretNameToUse }}
      key: password
- name: PEERDB_CATALOG_DATABASE
  valueFrom:
    secretKeyRef:
      name:  {{ $secretNameToUse }}
      key: dbname
- name: DATABASE_URL
  valueFrom:
    secretKeyRef:
      name:  {{ $secretNameToUse }}
      key: uri
{{- end -}}


{{- define "temporal.config" -}}
- name: TEMPORAL_HOST_PORT
  value: {{ .Values.temporal.host }}:{{ .Values.temporal.port }}
- name: PEERDB_TEMPORAL_NAMESPACE
  value: {{ .Values.temporal.namespace }}

{{- if not .Values.temporal.deploy.enabled }}
- name: TEMPORAL_CLIENT_CERT
  value: {{ .Values.temporal.clientCert }}
- name: TEMPORAL_CLIENT_KEY
  value: {{ .Values.temporal.clientKey }}
{{- end }}
- name: PEERDB_DEPLOYMENT_UID
  value: {{ .Values.temporal.taskQueueId }}
{{- end -}}

{{- define "aws.config" -}}
{{- if .Values.aws.accessKeyId }}
- name: AWS_ACCESS_KEY_ID
  value: {{ .Values.aws.accessKeyId | quote }}
{{- end }}
{{- if .Values.aws.secretAccessKey }}
- name: AWS_SECRET_ACCESS_KEY
  value: {{ .Values.aws.secretAccessKey | quote }}
{{- end }}
{{- if .Values.aws.region }}
- name: AWS_REGION
  value: {{ .Values.aws.region | quote }}
{{- end }}
{{- end -}}


{{- define "authentication.labels" -}}
app.kubernetes.io/name: {{ include "authentication.deploy.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end -}}
{{- define "authentication.selectorLabels" -}}
{{ include "authentication.labels" . }}
{{- end -}}

{{- define "authentication.deploy.name" -}}
authentication-proxy
{{- end -}}
{{- define "authentication.service.name" -}}
authentication-proxy
{{- end -}}
{{- define "authentication.config.name" -}}
{{- include "authentication.deploy.name" . }}-nginx-config
{{- end -}}
{{- define "authentication.healthcheck.config.name" -}}
{{- include "authentication.deploy.name" . }}-healthcheck-config
{{- end -}}

{{- define "authentication.secret.name" -}}
{{- include "authentication.deploy.name" . }}-htpasswd
{{- end -}}

{{- define "extract.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution" }}
{{ dict "result" (index (index . "nodeAffinity" | default dict) "preferredDuringSchedulingIgnoredDuringExecution" | default list) | toYaml }}
{{- end }}

{{- define "extract.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms" }}
{{ dict "result" (index (index (index . "nodeAffinity" | default dict) "requiredDuringSchedulingIgnoredDuringExecution" | default dict) "nodeSelectorTerms" | default list) | toYaml }}
{{- end }}


{{- define "extract.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution" }}
{{ dict "result" (index (index . "podAffinity" | default dict) "preferredDuringSchedulingIgnoredDuringExecution" | default list) | toYaml }}
{{- end }}

{{- define "extract.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution" }}
{{ dict "result" (index (index . "podAffinity" | default dict) "requiredDuringSchedulingIgnoredDuringExecution" | default list) | toYaml }}
{{- end }}

{{- define "extract.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution" }}
{{ dict "result" (index (index . "podAntiAffinity" | default dict) "preferredDuringSchedulingIgnoredDuringExecution" | default list) | toYaml }}
{{- end }}

{{- define "extract.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution" }}
{{ dict "result" (index (index . "podAntiAffinity" | default dict) "requiredDuringSchedulingIgnoredDuringExecution" | default list) | toYaml }}
{{- end }}

{{- define "pods.affinity" -}}
{{- $ := index . 0 }}
{{- $service := index . 1 }}
{{- $commonAffinity := $.Values.common.pods.affinity }}
{{- $lowCostAffinity := dict }}
{{- if (index (index $.Values $service) "lowCost") }}
    {{- $lowCostAffinity = $.Values.global.peerdb.lowCost.affinity }}
{{- end }}
{{- $specificAffinity := index (index (index $.Values $service) "pods") "affinity" }}

{{/*We will deep merge the following from common, lowCost and specific information of the deployment*/}}
{{- $nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution := list }}
{{- $nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms := list }}
{{- $podAffinity_preferredDuringSchedulingIgnoredDuringExecution := list }}
{{- $podAffinity_requiredDuringSchedulingIgnoredDuringExecution := list }}
{{- $podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution := list }}
{{- $podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution := list }}

{{- range $affinitySpec := list $commonAffinity $lowCostAffinity $specificAffinity }}
    {{- $nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution =
        concat $nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution
            (index (include "extract.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution" $affinitySpec | fromYaml) "result")
    }}
    {{- $nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms =
        concat $nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms
            (index (include "extract.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms" $affinitySpec | fromYaml) "result")
    }}
    {{- $podAffinity_preferredDuringSchedulingIgnoredDuringExecution =
        concat $podAffinity_preferredDuringSchedulingIgnoredDuringExecution
            (index (include "extract.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution" $affinitySpec | fromYaml) "result")
    }}
    {{- $podAffinity_requiredDuringSchedulingIgnoredDuringExecution =
        concat $podAffinity_requiredDuringSchedulingIgnoredDuringExecution
            (index (include "extract.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution" $affinitySpec | fromYaml) "result")
    }}
    {{- $podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution =
        concat $podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution
            (index (include "extract.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution" $affinitySpec | fromYaml) "result")
    }}
    {{- $podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution =
        concat $podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution
            (index (include "extract.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution" $affinitySpec | fromYaml) "result")
    }}
{{- end -}}

affinity:
  {{- if or $nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution $nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms }}
  nodeAffinity:
    {{- with $nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution }}
    preferredDuringSchedulingIgnoredDuringExecution:
      {{- . | toYaml | nindent 6 }}
    {{- end }}
    requiredDuringSchedulingIgnoredDuringExecution:
      {{ with $nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms }}
      nodeSelectorTerms:
        {{- . | toYaml | nindent 8 }}
      {{- end }}
  {{- end }}
  {{- if or $podAffinity_preferredDuringSchedulingIgnoredDuringExecution $podAffinity_requiredDuringSchedulingIgnoredDuringExecution }}
  podAffinity:
    {{- with $podAffinity_preferredDuringSchedulingIgnoredDuringExecution }}
    preferredDuringSchedulingIgnoredDuringExecution:
      {{- . | toYaml | nindent 6 }}
    {{- end }}
    {{- with $podAffinity_requiredDuringSchedulingIgnoredDuringExecution }}
    requiredDuringSchedulingIgnoredDuringExecution:
      {{- . | toYaml | nindent 6 }}
    {{- end }}
  {{- end }}
  podAntiAffinity:
    {{- with $podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution }}
    preferredDuringSchedulingIgnoredDuringExecution:
      {{- . | toYaml | nindent 6 }}
    {{- end }}
    {{- with $podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution }}
    requiredDuringSchedulingIgnoredDuringExecution:
      {{- . | toYaml | nindent 6 }}
    {{- end }}
{{- end -}}

{{- define "pods.nodeSelector" }}
{{- $ := index . 0 }}
{{- $service := index . 1 }}
{{- $commonNodeSelector := $.Values.common.pods.nodeSelector }}
{{- $lowCostNodeSelector := dict }}
{{- if (index (index $.Values $service) "lowCost") }}
    {{- $lowCostNodeSelector = $.Values.global.peerdb.lowCost.nodeSelector }}
{{- end }}
{{- $specificNodeSelector := index (index (index $.Values $service) "pods") "nodeSelector" }}
{{- $combined := merge dict $commonNodeSelector $lowCostNodeSelector $specificNodeSelector }}
{{- with $combined }}
nodeSelector:
  {{- $combined | toYaml | nindent 2 }}
{{- end }}
{{- end }}

{{- define "pods.tolerations" }}
{{- $ := index . 0 }}
{{- $service := index . 1 }}
{{- $commonTolerations := $.Values.common.pods.tolerations }}
{{- $lowCostTolerations := list }}
{{- if (index (index $.Values $service) "lowCost") }}
    {{- $lowCostTolerations = $.Values.global.peerdb.lowCost.tolerations }}
{{- end }}
{{- $specificTolerations := index (index (index $.Values $service) "pods") "tolerations" }}
{{- $combined := concat $commonTolerations $lowCostTolerations $specificTolerations }}
{{- with $combined }}
tolerations:
  {{- $combined | toYaml | nindent 4  }}
{{- end }}
{{- end }}

{{- define "pods.imagePullSecrets" }}
{{- $ := index . 0 }}
{{- $service := index . 1 }}
{{- $commonPullSecrets := $.Values.common.pods.imagePullSecrets }}
{{- $specificPullSecrets := index (index (index $.Values $service) "pods") "imagePullSecrets" | default list }}
{{- $combined := concat $commonPullSecrets $specificPullSecrets }}
{{ with $combined }}
imagePullSecrets:
  {{- $combined | toYaml | nindent 4 }}
{{- end }}
{{- end }}



{{- define "azure.config" -}}
{{- if .Values.azure.clientId }}
- name: AZURE_CLIENT_ID
  value: {{ .Values.azure.clientId | quote }}
{{- end }}
{{- if .Values.azure.clientSecret }}
- name: AZURE_CLIENT_SECRET
  value: {{ .Values.azure.clientSecret | quote }}
{{- end }}
{{- if .Values.azure.subscriptionId }}
- name: AZURE_SUBSCRIPTION_ID
  value: {{ .Values.azure.subscriptionId | quote }}
{{- end }}
{{- if .Values.azure.tenantId }}
- name: AZURE_TENANT_ID
  value: {{ .Values.azure.tenantId | quote }}
{{- end }}
{{- end -}}


{{- define "peerdb.common.selectorLabels" -}}
app.kubernetes.io/name: {{ include "peerdb.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end -}}

{{- define "peerdb.common.labels" -}}
{{ include "peerdb.common.selectorLabels" .}}
app.kubernetes.io/managed-by: {{ .Release.Service }}
app.kubernetes.io/part-of: {{ .Chart.Name }}
{{- end -}}

{{- define "component.labels" -}}
app.kubernetes.io/component: {{ . }}
app: {{ . }}
{{- end -}}